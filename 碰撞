from manim import*

class Box_ColisionExample(Scene):
    def construct(self):
        #受力运动函数
        def CircleMovement(cir,dt):
            cir.shift([cir.v[0] * dt*0.05,cir.v[1] * dt*0.05,0])
            a =[cir.force[0]/cir.mass,cir.force[1]/cir.mass]
            cir.v=[cir.v[0] + a[0]*dt,cir.v[1] + a[1]*dt]
        #碰撞判定函数
        def sq1_JudgeFunction(cir:Square,dt):
            sq1_center = cir.get_center()
            sq2_center = sq2.get_center()
            
            side1 = sq1.side_length
            side2 = sq2.side_length

            if np.linalg.norm(sq1_center-sq2_center) <= 0.5*(side1+side2):
               v1x =cir.v[0]
               v2x =sq2.v[0]
               cir.v  =[((cir.mass-sq2.mass)/(cir.mass+sq2.mass)) * v1x + ((2*sq2.mass)/(cir.mass+sq2.mass)) * v2x,0]
               sq2.v =[((sq2.mass-cir.mass)/(cir.mass+sq2.mass)) * v2x +((2*cir.mass)/(cir.mass+sq2.mass)) * v1x,0]
            cir.add_updater(CircleMovement)
            sq2.add_updater(CircleMovement)

        #box碰撞判定
        def sq1_box_wall_JudgeFunction(cir,dt):
            left_line = line.get_left()[0]
            right_line = line.get_right()[0]
            sq1_center= cir.get_center()[0]
            side_len  = sq1.side_length
            if abs(sq1_center-right_line) <= 0.5*side_len or abs(sq1_center-left_line) <=0.5*side_len :
                cir.v =[- cir.v[0]*cir.elastic,0]     
         
        def sq2_box_wall_JudgeFunction(cir,dt):
            left_line = line.get_left()[0]
            right_line = line.get_right()[0]
            sq1_center= cir.get_center()[0]
            side_len  = sq2.side_length
            if abs(sq1_center-right_line) <= 0.5*side_len or abs(sq1_center-left_line) <=0.5*side_len :
                cir.v =[- cir.v[0]*cir.elastic,0]

        #光滑地面
        line  = Line(np.array([-5,-0.5,0]),np.array([5,-0.5,0])).set_color(YELLOW)
        #墙*2
        wall1 = Line(np.array([-5,-0.5,0]),np.array([-5,2,0])).set_color(YELLOW)
        wall2 = Line(np.array([5,-0.5,0]),np.array([5,2,0])).set_color(YELLOW)
        vg =VGroup(line,wall1,wall2)
        
        #添加两个方块物体
        sq1 = Square(1).set_color(RED).move_to(np.array([-3,0,0])).set_fill(RED)
        sq1.v=[1.5,0]
        sq1_velocity = always_redraw(lambda: Vector(np.array([sq1.v[0],0,0])).move_to(sq1.get_center()).shift(UP*(0.5+0.5*sq1.side_length)).set_color(RED))
        sq1.force = [0,0]
        sq1.mass =1
        sq1.elastic =1
        
        sq2 = Square(1).set_color(BLUE).move_to(np.array([3,0,0])).set_fill(BLUE)
        sq2.v =[-1,0]
        sq2_velocity = always_redraw(lambda: Vector(np.array([sq2.v[0],0,0])).move_to(sq2.get_center()).shift(UP*(0.5+0.5*sq2.side_length)).set_color(BLUE))
        sq2.force = [0,0]
        sq2.mass =1
        sq2.elastic =1

        #添加质量值
        sq1_mass =always_redraw(lambda: Text(str(sq1.mass)).set_color(RED).scale(0.8).move_to(sq1.get_center()))
        sq2_mass =always_redraw(lambda: Text(str(sq2.mass)).set_color(BLUE).scale(0.8).move_to(sq2.get_center()))

        #在屏幕中添加速度值
        red_square_text=Text("红色方块的速度V:",color=RED).scale(0.5).to_edge(UP+LEFT)
        decimal=DecimalNumber(
            sq1.v[0],
            show_ellipsis=False,
            num_decimal_places=3,
            include_sign=True,
        ).next_to(red_square_text,RIGHT*1.2).set_color(RED).scale(0.8)
        decimal.add_updater(lambda v : v.set_value(sq1.v[0]))

        red_v_unit= Text("m/s").scale(0.5).next_to(decimal,RIGHT).set_color(RED)

        blue_square_text = Text("蓝色方块的速度V:",color=BLUE).scale(0.5).next_to(red_square_text,DOWN)
        blue_decimal=DecimalNumber(
            sq2.v[0],
            show_ellipsis=False,
            num_decimal_places=3,
            include_sign=True,
        ).next_to(blue_square_text,RIGHT*1.2).scale(0.8).set_color(BLUE)
        blue_decimal.add_updater(lambda v: v.set_value(sq2.v[0]))
        blue_v_text = Text("m/s").next_to(blue_decimal,RIGHT).scale(0.5).set_color(BLUE)
        
        #
        self.add(vg)
        self.add(red_square_text,blue_square_text)
        self.add(decimal,blue_decimal)
        self.add(red_v_unit,blue_v_text)
        self.add(sq1,sq2,sq1_velocity,sq2_velocity,sq1_mass,sq2_mass)
        sq1.add_updater(sq1_JudgeFunction,index=1)
        sq1.add_updater(sq1_box_wall_JudgeFunction)
        sq2.add_updater(sq2_box_wall_JudgeFunction)
        self.wait(5)
